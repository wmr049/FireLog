{"version":3,"file":"auth.service.js","sourceRoot":"","sources":["../../../../.ng_build/auth/services/auth.service.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nimport { Injectable, Optional, Inject, Injector } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/switchMap';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/do';\n\nimport { NbAbstractAuthProvider } from '../providers/abstract-auth.provider';\nimport { NbAuthSimpleToken, NbTokenService } from './token.service';\nimport { NB_AUTH_PROVIDERS_TOKEN } from '../auth.options';\n\nexport class NbAuthResult {\n\n  protected token: any;\n  protected errors: string[] = [];\n  protected messages: string[] = [];\n\n  // TODO pass arguments in options object\n  constructor(protected success: boolean,\n    protected response?: any,\n    protected redirect?: any,\n    errors?: any,\n    messages?: any,\n    token?: NbAuthSimpleToken) {\n\n    this.errors = this.errors.concat([errors]);\n    if (errors instanceof Array) {\n      this.errors = errors;\n    }\n\n    this.messages = this.messages.concat([messages]);\n    if (messages instanceof Array) {\n      this.messages = messages;\n    }\n\n    this.token = token;\n  }\n\n  getResponse(): any {\n    return this.response;\n  }\n\n  getTokenValue(): any {\n    return this.token;\n  }\n\n  replaceToken(token: NbAuthSimpleToken): any {\n    this.token = token\n  }\n\n  getRedirect(): any {\n    return this.redirect;\n  }\n\n  getErrors(): string[] {\n    return this.errors.filter(val => !!val);\n  }\n\n  getMessages(): string[] {\n    return this.messages.filter(val => !!val);\n  }\n\n  isSuccess(): boolean {\n    return this.success;\n  }\n\n  isFailure(): boolean {\n    return !this.success;\n  }\n}\n\n@Injectable()\nexport class NbAuthService {\n\n  constructor(protected tokenService: NbTokenService,\n              protected injector: Injector,\n              @Optional() @Inject(NB_AUTH_PROVIDERS_TOKEN) protected providers = {}) {\n  }\n\n  /**\n   * Retrieves current authenticated token stored\n   * @returns {Observable<any>}\n   */\n  getToken(): Observable<NbAuthSimpleToken> {\n    return this.tokenService.get();\n  }\n\n  /**\n   * Returns true if auth token is presented in the token storage\n   * // TODO: check exp date for JWT token\n   * @returns {Observable<any>}\n   */\n  isAuthenticated(): Observable<any> {\n    return this.getToken().map(token => token && token.getValue());\n  }\n\n  /**\n   * Returns tokens stream\n   * @returns {Observable<any>}\n   */\n  onTokenChange(): Observable<NbAuthSimpleToken> {\n    return this.tokenService.tokenChange();\n  }\n\n  /**\n   * Returns authentication status stream\n   *  // TODO: check exp date for JWT token\n   * @returns {Observable<any>}\n   */\n  onAuthenticationChange(): Observable<boolean> {\n    return this.onTokenChange().map(token => !!token);\n  }\n\n  /**\n   * Authenticates with the selected provider\n   * Stores received token in the token storage\n   *\n   * Example:\n   * authenticate('email', {email: 'email@example.com', password: 'test'})\n   *\n   * @param provider\n   * @param data\n   * @returns {Observable<NbAuthResult>}\n   */\n  authenticate(provider: string, data?: any): Observable<NbAuthResult> {\n    return this.getProvider(provider).authenticate(data)\n      .switchMap((result: NbAuthResult) => {\n        if (result.isSuccess() && result.getTokenValue()) {\n          return this.tokenService.set(result.getTokenValue())\n            .switchMap(_ => this.tokenService.get())\n            .map(token => {\n              result.replaceToken(token);\n              return result;\n            });\n        }\n\n        return Observable.of(result);\n      });\n  }\n\n  /**\n   * Registers with the selected provider\n   * Stores received token in the token storage\n   *\n   * Example:\n   * register('email', {email: 'email@example.com', name: 'Some Name', password: 'test'})\n   *\n   * @param provider\n   * @param data\n   * @returns {Observable<NbAuthResult>}\n   */\n  register(provider: string, data?: any): Observable<NbAuthResult> {\n    return this.getProvider(provider).register(data)\n      .switchMap((result: NbAuthResult) => {\n        if (result.isSuccess() && result.getTokenValue()) {\n          return this.tokenService.set(result.getTokenValue())\n            .switchMap(_ => this.tokenService.get())\n            .map(token => {\n              result.replaceToken(token);\n              return result;\n            });\n        }\n\n        return Observable.of(result);\n      });\n  }\n\n  /**\n   * Sign outs with the selected provider\n   * Removes token from the token storage\n   *\n   * Example:\n   * logout('email')\n   *\n   * @param provider\n   * @returns {Observable<NbAuthResult>}\n   */\n  logout(provider: string): Observable<NbAuthResult> {\n    return this.getProvider(provider).logout()\n      .do((result: NbAuthResult) => {\n        if (result.isSuccess()) {\n          this.tokenService.clear().subscribe(() => { });\n        }\n      });\n  }\n\n  /**\n   * Sends forgot password request to the selected provider\n   *\n   * Example:\n   * requestPassword('email', {email: 'email@example.com'})\n   *\n   * @param provider\n   * @param data\n   * @returns {Observable<NbAuthResult>}\n   */\n  requestPassword(provider: string, data?: any): Observable<NbAuthResult> {\n    return this.getProvider(provider).requestPassword(data);\n  }\n\n  /**\n   * Tries to reset password with the selected provider\n   *\n   * Example:\n   * resetPassword('email', {newPassword: 'test'})\n   *\n   * @param provider\n   * @param data\n   * @returns {Observable<NbAuthResult>}\n   */\n  resetPassword(provider: string, data?: any): Observable<NbAuthResult> {\n    return this.getProvider(provider).resetPassword(data);\n  }\n\n  getProvider(provider: string): NbAbstractAuthProvider {\n    if (!this.providers[provider]) {\n      throw new TypeError(`Nb auth provider '${provider}' is not registered`);\n    }\n\n    return this.injector.get(this.providers[provider].service);\n  }\n}\n"]}