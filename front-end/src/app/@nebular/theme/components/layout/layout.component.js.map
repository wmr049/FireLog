{"version":3,"file":"layout.component.js","sourceRoot":"","sources":["../../../../../.ng_build/theme/components/layout/layout.component.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport {\n  AfterViewInit,\n  Component,\n  ComponentFactoryResolver,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  Input,\n  OnDestroy,\n  Renderer2,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { Subject } from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport 'rxjs/add/operator/toPromise';\nimport 'rxjs/add/operator/filter';\n\nimport { convertToBoolProperty } from '../helpers';\nimport { NbThemeService } from '../../services/theme.service';\nimport { NbSpinnerService } from '../../services/spinner.service';\n\n/**\n * A container component which determines a content position inside of the layout.\n * The layout could contain unlimited columns (not including the sidebars).\n *\n * @example By default the columns are ordered from the left to the right,\n * but it's also possible to overwrite this behavior by setting a `left` attribute to the column,\n * moving it to the very first position:\n * ```\n * <nb-layout>\n *   <nb-layout-column>Second</nb-layout-column>\n *   <nb-layout-column>Third</nb-layout-column>\n *   <nb-layout-column left>First</nb-layout-column>\n * </nb-layout>\n * ```\n */\n@Component({\n  selector: 'nb-layout-column',\n  template: `\n    <ng-content></ng-content>\n  `,\n})\nexport class NbLayoutColumnComponent {\n\n  @HostBinding('class.left') leftValue: boolean;\n\n  /**\n   * Move the column to the very left position in the layout.\n   * @param {boolean} val\n   */\n  @Input()\n  set left(val: boolean) {\n    this.leftValue = convertToBoolProperty(val);\n  }\n}\n\n/**\n * Page header component.\n * Located on top of the page above the layout columns and sidebars.\n * Could be made `fixed` by setting the corresponding property. In the fixed mode the header becomes\n * sticky to the top of the nb-layout (to of the page).\n */\n@Component({\n  selector: 'nb-layout-header',\n  template: `\n    <nav [class.fixed]=\"fixedValue\">\n      <ng-content></ng-content>\n    </nav>\n  `,\n})\nexport class NbLayoutHeaderComponent {\n\n  @HostBinding('class.fixed') fixedValue: boolean;\n\n  /**\n   * Makes the header sticky to the top of the nb-layout.\n   * @param {boolean} val\n   */\n  @Input()\n  set fixed(val: boolean) {\n    this.fixedValue = convertToBoolProperty(val);\n  }\n}\n\n/**\n * Page footer.\n * Located under the nb-layout content (specifically, under the columns).\n * Could be made `fixed`, becoming sticky to the bottom of the view port (window).\n */\n@Component({\n  selector: 'nb-layout-footer',\n  template: `\n    <nav [class.fixed]=\"fixedValue\">\n      <ng-content></ng-content>\n    </nav>\n  `,\n})\nexport class NbLayoutFooterComponent {\n\n  @HostBinding('class.fixed') fixedValue: boolean;\n\n  /**\n   * Makes the footer sticky to the bottom of the window.\n   * @param {boolean} val\n   */\n  @Input()\n  set fixed(val: boolean) {\n    this.fixedValue = convertToBoolProperty(val);\n  }\n\n}\n\n/**\n * The general Nebular component-container.\n * It is required that all children component of the framework are located inside of the nb-layout.\n *\n * Can contain the following components inside:\n *\n * ```\n * nb-layout-header\n * nb-layout-column\n * nb-sidebar\n * nb-layout-footer\n * ```\n *\n * By default the layout fills up the full view-port.\n * The window scrollbars are disabled on the body and moved inside of the nb-layout, so that the scrollbars\n * won't mess with the fixed nb-header.\n *\n * The children components are projected into the flexible layout structure allowing to adjust the layout behavior\n * based on the settings provided.\n *\n * The layout content (columns) becomes centered when the window width is more than\n * the value specified in the theme variable `layout-content-width`.\n *\n * The layout also contains the area on the very top (the first child of the nb-layout), which could be used\n * to dynamically append some components like modals or spinners/loaders\n * so that they are located on top of the elements hierarchy.\n * More details are below under the `ThemeService` section.\n *\n * The layout component is also responsible for changing of the application themes.\n * It listens to the `themeChange` event and change the theme CSS class appended to body.\n * Based on the class appended a specific CSS-theme is applied to the application.\n * More details of the Theme System could be found here [Enabling Theme System](#/docs/concepts/theme-system)\n *\n * @example A simple layout example:\n *\n * ```\n * <nb-layout>\n *   <nb-layout-header>Great Company</nb-layout-header>\n *\n *   <nb-layout-column>\n *     Hello World!\n *   </nb-layout-column>\n *\n *   <nb-layout-footer>Contact us</nb-layout-footer>\n * </nb-layout>\n * ```\n *\n * @example For example, it is possible to ask the layout to center the columns (notice: we added a `center` attribute\n * to the layout:\n *\n * ```\n * <nb-layout center>\n *   <nb-layout-header>Great Company</nb-layout-header>\n *\n *   <nb-layout-column>\n *     Hello World!\n *   </nb-layout-column>\n *\n *   <nb-layout-footer>Contact us</nb-layout-footer>\n * </nb-layout>\n * ```\n *\n * @styles\n *\n * layout-font-family\n * layout-font-size\n * layout-line-height\n * layout-fg\n * layout-bg\n * layout-min-height\n * layout-content-width\n * layout-window-mode-min-width\n * layout-window-mode-max-width: window mode only, after this value layout turns into floating window\n * layout-window-mode-bg: window mode only, background\n * layout-window-mode-padding-top: window mode only, max padding from top\n * layout-window-shadow: window mode shadow\n * layout-padding\n * layout-medium-padding\n * layout-small-padding\n\n */\n@Component({\n  selector: 'nb-layout',\n  styleUrls: ['./layout.component.css'],\n  template: `\n    <ng-template #layoutTopDynamicArea></ng-template>\n    <div class=\"scrollable-container\">\n      <div class=\"layout\">\n        <ng-content select=\"nb-layout-header\"></ng-content>\n        <div class=\"layout-container\">\n          <ng-content select=\"nb-sidebar\"></ng-content>\n          <div class=\"content\" [class.center]=\"centerValue\">\n            <div class=\"columns\">\n              <ng-content select=\"nb-layout-column\"></ng-content>\n            </div>\n            <ng-content select=\"nb-layout-footer\"></ng-content>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n})\nexport class NbLayoutComponent implements OnDestroy, AfterViewInit {\n\n  centerValue: boolean = false;\n  @HostBinding('class.window-mode') windowModeValue: boolean = false;\n  @HostBinding('class.with-scroll') withScrollValue: boolean = false;\n\n  /**\n   * Defines whether the layout columns will be centered after some width\n   * @param {boolean} val\n   */\n  @Input()\n  set center(val: boolean) {\n    this.centerValue = convertToBoolProperty(val);\n  }\n\n  /**\n   * Defines whether the layout enters a 'window' mode, when the layout content (including sidebars and fixed header)\n   * becomes centered by width with a margin from the top of the screen, like a floating window.\n   * Automatically enables `withScroll` mode, as in the window mode scroll must be inside the layout and cannot be on\n   * window. (TODO: check this)\n   * @param {boolean} val\n   */\n  @Input()\n  set windowMode(val: boolean) {\n    this.windowModeValue = convertToBoolProperty(val);\n    this.withScroll = true;\n  }\n\n  /**\n   * Defines whether to move the scrollbars to layout or leave it at the body level.\n   * Automatically set to true when `windowMode` is enabled.\n   * @param {boolean} val\n   */\n  @Input()\n  set withScroll(val: boolean) {\n    this.withScrollValue = convertToBoolProperty(val);\n\n    // TODO: is this the best way of doing it? as we don't have access to body from theme styles\n    // TODO: add e2e test\n    const body = document.getElementsByTagName('body')[0];\n    if (this.withScrollValue) {\n      this.renderer.setStyle(body, 'overflow', 'hidden');\n    } else {\n      this.renderer.setStyle(body, 'overflow', 'initial');\n    }\n  }\n\n  @ViewChild('layoutTopDynamicArea', { read: ViewContainerRef }) veryTopRef: ViewContainerRef;\n\n  protected afterViewInit$ = new BehaviorSubject(null);\n\n  protected appendClassSubscription: Subscription;\n  protected removeClassSubscription: Subscription;\n  protected themeSubscription: Subscription;\n  protected appendSubscription: Subscription;\n  protected clearSubscription: Subscription;\n\n  constructor(protected themeService: NbThemeService,\n              protected spinnerService: NbSpinnerService,\n              protected componentFactoryResolver: ComponentFactoryResolver,\n              protected elementRef: ElementRef,\n              protected renderer: Renderer2) {\n\n    this.themeSubscription = this.themeService.onThemeChange().subscribe((theme) => {\n\n      const body = document.getElementsByTagName('body')[0];\n      if (theme.previous) {\n        this.renderer.removeClass(body, `nb-theme-${theme.previous}`);\n      }\n      this.renderer.addClass(body, `nb-theme-${theme.name}`);\n    });\n\n    this.appendClassSubscription = this.themeService.onAppendLayoutClass().subscribe((className) => {\n      this.renderer.addClass(this.elementRef.nativeElement, className);\n    });\n\n    this.removeClassSubscription = this.themeService.onRemoveLayoutClass().subscribe((className) => {\n      this.renderer.removeClass(this.elementRef.nativeElement, className);\n    });\n\n    this.spinnerService.registerLoader(new Promise((resolve, reject) => {\n      this.afterViewInit$.subscribe((_) => resolve());\n    }));\n    this.spinnerService.load();\n\n    // trigger first time so that after the change we have the initial value\n    this.themeService.changeWindowWidth(window.innerWidth);\n  }\n\n  ngAfterViewInit(): void {\n    this.appendSubscription = this.themeService.onAppendToTop()\n      .subscribe((data: { component: any, listener: Subject<any> }) => {\n        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(data.component);\n        const componentRef = this.veryTopRef.createComponent(componentFactory);\n        data.listener.next(componentRef);\n        data.listener.complete();\n      });\n\n    this.clearSubscription = this.themeService.onClearLayoutTop()\n      .subscribe((data: { listener: Subject<any> }) => {\n        this.veryTopRef.clear();\n        data.listener.next(true);\n      });\n\n    this.afterViewInit$.next(true);\n  }\n\n  ngOnDestroy(): void {\n    this.themeService.clearLayoutTop();\n    this.themeSubscription.unsubscribe();\n    this.appendClassSubscription.unsubscribe();\n    this.removeClassSubscription.unsubscribe();\n    this.appendSubscription.unsubscribe();\n    this.clearSubscription.unsubscribe();\n  }\n\n  @HostListener('window:resize', ['$event'])\n  onResize(event) {\n    this.themeService.changeWindowWidth(event.target.innerWidth);\n  }\n}\n"]}